{"version":3,"sources":["services/object_extensions.exec.js","services/StockTimeSeries.js","components/TimeSeriesChart.js","services/QuandlAPI.js","components/StockPrice.js","App.js","reportWebVitals.js","index.js"],"names":["Object","String","Number","Boolean","map","receiver","defineProperty","prototype","value","intercept","this","valueOf","enumerable","configurable","writable","addTap","val","console","log","addLog","tap","x","addDebug","addChain","StockTimeSeries","data","name","metadata","events","item","timestamp","moment","Date","date_string","open","close","low","high","TimeEvent","toDate","sortedCollection","Collection","sortByTime","series","TimeSeries","columns","collection","volumeEvents","index","volume","IndexedEvent","sortedVolumeCollection","seriesVolume","utc","NullMarker","props","Stockchart","tickerCode","useState","startDate","endDate","selectedDate","setSelectedDate","mode","timerange","TimeRange","sts","state","setState","tracker","trackerValue","trackerEvent","trackerState","setTrackerState","useEffect","focusedInput","croppedSeries","crop","croppedVolumeSeries","linkStyle","fontWeight","color","cursor","linkStyleActive","className","isOutsideRange","displayFormat","onDatesChange","onFocusChange","small","onClick","style","timeRange","hideWeekends","enablePanZoom","onTimeRangeChanged","timeAxisStyle","axis","fill","stroke","onTrackerChanged","t","e","atTime","eventTime","begin","getTime","end","eventValue","get","v","height","normal","interpolation","type","event","column","info","label","infoTimeFormat","infoWidth","markerRadius","markerStyle","id","min","max","format","width","axisMargin","dangerouslySetInnerHTML","__html","description","parseData","d","date","timeParse","Open","High","Low","Close","Volume","QUANDL_DATASETS_API","QuandlAPI","getDatasets","a","datasets","fetch","response","ok","json","jsonResponse","cached_datasets","getStockData","data_format","start_date","end_date","text","csvParse","key2rowIdx","reduce","memo","row","i","entries","forEach","k","push","StockPrice","setMetadata","setDatasets","stockData","setStockData","loading","setLoading","then","sort","b","dataset_code","getOptionLabel","getOptionValue","onChange","defaultOptions","placeholder","options","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.38ef342d.chunk.js","sourcesContent":["const addTap = receiver =>\n  Object.defineProperty(receiver.prototype, \"tap\", {\n    value: function(intercept) {\n      let val = this.valueOf ? this.valueOf() : this;\n      intercept(val);\n      return this;\n    },\n    enumerable: false,\n    configurable: true,\n    writable: true\n  });\n\nconst addLog = receiver =>\n  Object.defineProperty(receiver.prototype, \"log\", {\n    value: function(intercept) {\n      //if (process.env.NODE_ENV == 'production') return this;\n      let val = this.valueOf ? this.valueOf() : this;\n      if (intercept) {\n        console.log(`${intercept} `, val || \"\");\n      } else {\n        console.log(val);\n      }\n      return this;\n    },\n    enumerable: false,\n    configurable: true,\n    writable: true\n  });\n\nconst addDebug = receiver =>\n  Object.defineProperty(receiver.prototype, \"debug\", {\n    value: function(intercept) {\n      let val = this.valueOf ? this.valueOf() : this;\n      val.tap(x => {\n        debugger;\n      });\n      return this;\n    },\n    enumerable: false,\n    configurable: true,\n    writable: true\n  });\n\nconst addChain = receiver =>\n  Object.defineProperty(receiver.prototype, \"chain\", {\n    value: function(intercept) {\n      let val = this.valueOf ? this.valueOf() : this;\n      return intercept(val);\n    },\n    enumerable: false,\n    configurable: true,\n    writable: true\n  });\n\n[Object, String, Number, Boolean].map(receiver => {\n  addTap(receiver);\n  addLog(receiver);\n  addDebug(receiver);\n  addChain(receiver);\n});\n","// Pond\nimport { Collection, TimeSeries, TimeEvent, IndexedEvent } from \"pondjs\";\nimport moment from \"moment\";\n\nconst StockTimeSeries = ({ data, metadata }) => {\n  const name = metadata.name;\n  const columns = [\"time\", \"open\", \"close\", \"low\", \"high\"];\n  const events = data.map((item) => {\n    const timestamp = moment(new Date(item.date_string));\n    const { open, close, low, high } = item;\n    return new TimeEvent(timestamp.toDate(), {\n      open: +open,\n      close: +close,\n      low: +low,\n      high: +high,\n    });\n  });\n  const collection = new Collection(events);\n  const sortedCollection = collection.sortByTime();\n  const series = new TimeSeries({\n    name,\n    columns,\n    collection: sortedCollection,\n  });\n\n  //\n  // Volume\n  //\n\n  const volumeEvents = data.map((item) => {\n    const index = item.date_string;\n    const { volume } = item;\n    return new IndexedEvent(index, { volume: +volume });\n  });\n  const volumeCollection = new Collection(volumeEvents);\n  const sortedVolumeCollection = volumeCollection.sortByTime();\n\n  const seriesVolume = new TimeSeries({\n    name: name,\n    utc: false,\n    collection: sortedVolumeCollection,\n  });\n\n  return {\n    series,\n    seriesVolume,\n  };\n};\n\nexport default StockTimeSeries;\n","import React, { useEffect, useState } from \"react\";\nimport moment from \"moment\";\nimport \"react-dates/initialize\";\nimport \"react-dates/lib/css/_datepicker.css\";\nimport { DateRangePicker } from \"react-dates\";\n// Pond\nimport { TimeRange } from \"pondjs\";\n\n// Imports from the charts library\nimport {\n  ChartContainer,\n  ChartRow,\n  Charts,\n  YAxis,\n  LineChart,\n  BarChart,\n  Resizable,\n  EventMarker,\n} from \"react-timeseries-charts\";\nimport StockTimeSeries from \"../services/StockTimeSeries\";\n\nconst NullMarker = (props) => {\n  return <g />;\n};\n\nconst Stockchart = (props) => {\n  const { data, metadata, tickerCode } = props;\n\n  const [selectedDate, setSelectedDate] = useState({\n    startDate: moment(metadata[\"oldest_available_date\"]),\n    endDate: moment(metadata[\"newest_available_date\"]),\n  });\n  const [state, setState] = useState({\n    mode: \"linear\",\n    timerange: new TimeRange([\n      metadata[\"oldest_available_date\"],\n      metadata[\"newest_available_date\"],\n    ]),\n    sts: StockTimeSeries({ data, metadata }),\n  });\n  const [trackerState, setTrackerState] = useState({\n    tracker: null,\n    trackerValue: \"-- USD\",\n    trackerEvent: null,\n  });\n\n  const handleTrackerChanged = (t) => {\n    if (t && croppedSeries) {\n      const e = croppedSeries.atTime(t);\n      const eventTime = new Date(\n        e.begin().getTime() + (e.end().getTime() - e.begin().getTime()) / 2\n      );\n      const eventValue = e.get(\"close\");\n      const v = `${eventValue} USD`;\n      setTrackerState({ tracker: eventTime, trackerValue: v, trackerEvent: e });\n    } else {\n      setTrackerState({\n        tracker: null,\n        trackerValue: null,\n        trackerEvent: null,\n      });\n    }\n  };\n\n  const renderMarker = () => {\n    if (!trackerState.tracker) {\n      return <NullMarker />;\n    }\n    return (\n      <EventMarker\n        type=\"flag\"\n        axis=\"y\"\n        event={trackerState.trackerEvent}\n        column=\"close\"\n        info={[{ label: \"closing\", value: trackerState.trackerValue }]}\n        infoTimeFormat=\"%B %d, %Y\"\n        infoWidth={120}\n        markerRadius={2}\n        markerStyle={{ fill: \"black\" }}\n      />\n    );\n  };\n  useEffect(() => {\n    if (!tickerCode) {\n      return;\n    }\n\n    setState({\n      mode: \"linear\",\n      focusedInput: null,\n      timerange: new TimeRange([\n        metadata[\"oldest_available_date\"],\n        metadata[\"newest_available_date\"],\n      ]),\n      sts: StockTimeSeries({ data, metadata }),\n    });\n\n    return () => {\n      // cleanup\n    };\n  }, [props]);\n\n  const handleTimeRangeChange = (timerange) => {\n    setState({ ...state, timerange });\n  };\n\n  const setModeLinear = () => {\n    setState({ ...state, mode: \"linear\" });\n  };\n\n  const setModeLog = () => {\n    setState({ ...state, mode: \"log\" });\n  };\n\n  const onDatesChange = ({ startDate, endDate }) => {\n    setSelectedDate({ startDate, endDate });\n  };\n\n  const onFocusChange = (focusedInput) => {\n    setState({ ...state, focusedInput });\n  };\n\n  const resetDateRange = () => {\n    setSelectedDate({\n      startDate: moment(metadata[\"oldest_available_date\"]),\n      endDate: moment(metadata[\"newest_available_date\"]),\n    });\n  };\n\n  let croppedSeries = state.sts.series.crop(state.timerange);\n  let croppedVolumeSeries = state.sts.seriesVolume.crop(state.timerange);\n\n  const linkStyle = {\n    fontWeight: 600,\n    color: \"grey\",\n    cursor: \"default\",\n  };\n\n  const linkStyleActive = {\n    color: \"steelblue\",\n    cursor: \"pointer\",\n  };\n\n  return (\n    <div>\n      <hr />\n\n      <nav className=\"level\">\n        <div className=\"level-left\">\n          <p className=\"level-item\">\n            <DateRangePicker\n              focusedInput={state.focusedInput}\n              isOutsideRange={() => false}\n              displayFormat=\"YYYY-MM-DD\"\n              onDatesChange={onDatesChange}\n              onFocusChange={onFocusChange}\n              startDate={selectedDate.startDate}\n              endDate={selectedDate.endDate}\n              small\n            />\n          </p>\n          <p className=\"level-item\">\n            <button\n              className=\"button is-small is-success\"\n              onClick={resetDateRange}\n            >\n              <span className=\"icon is-small\">\n                <i className=\"fas fa-sync\"></i>\n              </span>\n              <span>Reset (dates)</span>\n            </button>\n          </p>\n        </div>\n\n        <div className=\"level-right\">\n          <p className=\"level-item\">\n            <span\n              style={state.mode === \"log\" ? linkStyleActive : linkStyle}\n              onClick={setModeLinear}\n            >\n              Linear\n            </span>\n            <span> | </span>\n            <span\n              style={state.mode === \"linear\" ? linkStyleActive : linkStyle}\n              onClick={setModeLog}\n            >\n              Log\n            </span>\n          </p>\n        </div>\n      </nav>\n\n      <hr />\n\n      <div className=\"columns\">\n        <div className=\"column\">\n          <Resizable>\n            <ChartContainer\n              timeRange={\n                new TimeRange([selectedDate.startDate, selectedDate.endDate])\n              }\n              hideWeekends={true}\n              enablePanZoom={true}\n              onTimeRangeChanged={handleTimeRangeChange}\n              timeAxisStyle={{ axis: { fill: \"none\", stroke: \"none\" } }}\n              onTrackerChanged={handleTrackerChanged}\n            >\n              <ChartRow height=\"300\">\n                <Charts>\n                  <LineChart\n                    axis=\"y\"\n                    style={{ close: { normal: { stroke: \"steelblue\" } } }}\n                    columns={[\"close\"]}\n                    series={croppedSeries}\n                    interpolation=\"curveBasis\"\n                  />\n                  {renderMarker()}\n                </Charts>\n                <YAxis\n                  id=\"y\"\n                  label=\"Price ($)\"\n                  min={croppedSeries.min(\"close\")}\n                  max={croppedSeries.max(\"close\")}\n                  format=\",.0f\"\n                  width=\"60\"\n                  type={state.mode}\n                />\n              </ChartRow>\n              <ChartRow height=\"200\" axisMargin={0}>\n                <Charts>\n                  <BarChart\n                    axis=\"y\"\n                    style={{ volume: { normal: { stroke: \"steelblue\" } } }}\n                    columns={[\"volume\"]}\n                    series={croppedVolumeSeries}\n                  />\n                </Charts>\n                <YAxis\n                  id=\"y\"\n                  label=\"Volume\"\n                  min={croppedVolumeSeries.min(\"volume\")}\n                  max={croppedVolumeSeries.max(\"volume\")}\n                  width=\"60\"\n                />\n              </ChartRow>\n            </ChartContainer>\n          </Resizable>\n        </div>\n      </div>\n\n      <hr />\n      <div className=\"columns\">\n        <div\n          className=\"column\"\n          dangerouslySetInnerHTML={{ __html: props.metadata.description }}\n        ></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Stockchart;\n","import cached_datasets from \"../cached_data/datasets.json\";\nimport { csvParse } from \"d3-dsv\";\nimport { timeParse } from \"d3-time-format\";\n\n// helper functions\n\n// Parser function for each row from the API\nconst parseData = (d) => {\n  d.date_string = d.Date;\n  d.date = timeParse(\"%Y-%m-%d\")(d.Date);\n  d.open = +d.Open;\n  d.high = +d.High;\n  d.low = +d.Low;\n  d.close = +d.Close;\n  d.volume = +d.Volume;\n  return d;\n};\n\n// constants\nconst QUANDL_API_KEY = `HyjG4ErwyxiQiZ8WKz5z`; // TODO: move this to server side API\nconst QUANDL_BASE_API = `https://www.quandl.com/api/v3`;\nconst QUANDL_DATASETS_API = `${QUANDL_BASE_API}/datasets?database_code=EOD&filter=sample&page=1&per_page=50&query=&format=json`;\n\nconst QuandlAPI = {\n  getDatasets: async () => {\n    let datasets = null;\n    try {\n      const response = await fetch(QUANDL_DATASETS_API);\n      if (response.ok) {\n        const jsonResponse = await response.json();\n        datasets = jsonResponse[\"datasets\"];\n      } else {\n        datasets = cached_datasets[\"datasets\"];\n      }\n    } catch (error) {\n      console.log(error);\n      datasets = cached_datasets[\"datasets\"];\n    }\n\n    return datasets;\n  },\n  getStockData: async (\n    tickerCode: string,\n    data_format: string,\n    start_date: string,\n    end_date: string\n  ) => {\n    const response = await fetch(\n      `https://www.quandl.com/api/v3/datasets/EOD/${tickerCode}.csv?api_key=${QUANDL_API_KEY}`\n    );\n    const text = await response.text();\n\n    let data = csvParse(text, parseData);\n    if (data_format === \"array\") {\n      // reduce data to arrays\n      const key2rowIdx = {\n        date: 0,\n        open: 1,\n        high: 2,\n        low: 3,\n        close: 4,\n        volume: 5,\n      };\n      data = data.reduce(\n        (memo, row, i) => {\n          Object.entries(key2rowIdx).forEach(([k, i]) => memo[i].push(row[k]));\n          return memo;\n        },\n        [[], [], [], [], [], []]\n      );\n    }\n\n    return data;\n  },\n};\n\nexport default QuandlAPI;\n","import React, { useState, useEffect } from \"react\";\nimport Select from \"react-select\";\nimport Stockchart from \"./TimeSeriesChart.js\";\nimport QuandlAPI from \"../services/QuandlAPI.js\";\nimport { Spinner } from \"react-spinners-css\";\n\nconst StockPrice = () => {\n  const [metadata, setMetadata] = useState(null);\n  const [datasets, setDatasets] = useState(null);\n  const [stockData, setStockData] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    QuandlAPI.getDatasets().then((d) =>\n      setDatasets(\n        d.sort((a, b) => {\n          if (a[\"dataset_code\"] > b[\"dataset_code\"]) return 1;\n          if (a[\"dataset_code\"] < b[\"dataset_code\"]) return -1;\n          return 0;\n        })\n      )\n    );\n  }, []);\n\n  useEffect(() => {\n    if (!metadata) {\n      return;\n    }\n\n    setLoading(true);\n    QuandlAPI.getStockData(metadata.dataset_code, \"json\").then((d) => {\n      setStockData(d);\n      setLoading(false);\n    });\n\n    return () => {\n      // cleanup\n    };\n  }, [metadata]);\n\n  return (\n    <div>\n      <Select\n        getOptionLabel={({ dataset_code, name }) => `${dataset_code} - ${name}`}\n        getOptionValue={({ dataset_code }) => dataset_code}\n        onChange={(d) => setMetadata(d)}\n        defaultOptions\n        placeholder={\n          !datasets ? \"loading...\" : \"Select a stock by typing ticker or name\"\n        }\n        loading={!datasets}\n        options={datasets}\n      />\n\n      <h2 className=\"is-size-2\">{metadata?.name}</h2>\n\n      {stockData && metadata ? (\n        <Stockchart\n          tickerCode={metadata.dataset_code}\n          data={stockData}\n          metadata={metadata}\n        />\n      ) : (\n        loading && (\n          <div className=\"is-flex is-justify-content-center\">\n            <Spinner />\n          </div>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default StockPrice;\n","import \"./services/object_extensions.exec\";\nimport StockPrice from \"./components/StockPrice.js\";\n\nfunction App() {\n  return (\n    <section className=\"section\">\n      <div className=\"container\">\n        <h1 className=\"title\">Stock Price Checker</h1>\n        <h2 className=\"subtitle\">Check your favorite stock's historic price</h2>\n\n        <StockPrice />\n      </div>\n    </section>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}